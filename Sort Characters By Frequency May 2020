Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.

//c++

class Solution {
public:
    string frequencySort(string s) {
        
        if(s.length() == 1)
            return s;
        vector<pair<char,int>> data;
        
        for(int i=32;i<=126;i++){
            data.push_back(make_pair(char(i),0));
        }
        
        for(auto ch: s){
            ++data[ch-32].second;
        }
        
        sort(data.begin(), data.end(), [](auto &left, auto &right) {
            return (left.second == right.second? left.first<right.first :left.second > right.second);
        });
        
        s = "";
        
        for(auto a : data){
            if(a.second == 0)
                break;
            for(int i=0;i<a.second;i++){
                s += a.first;
            }
        }
        
        return s;
    }
};
