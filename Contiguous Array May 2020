Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.
Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
Note: The length of the given binary array will not exceed 50,000.
//c++ using map

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int len = nums.size();
        int maxLen = 0;
        unordered_map<int,int> mp;
        if(len == 0 || len ==1){
            return 0;
        }
        
        nums[0] = nums[0] == 0 ? -1 : 1;
        mp[nums[0]] = 0;
        
        for(int i=1;i<len;i++){
            nums[i] = nums[i-1]+ (nums[i] == 0 ?  -1 : 1);
            if(nums[i] == 0)
                maxLen = max(i+1,maxLen);
        }
        
        for(int i=0;i<len;i++){
            if(nums[i] == 0)
                continue;
            else if(mp.find(nums[i]) != mp.end()){
                maxLen = max(i - mp[nums[i]],maxLen);
                nums[i] = 0;
            }else{
                mp[nums[i]] = i;
            }
        }
        
        return maxLen;
    }
};

//C++ using 2*size array

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int len = nums.size();
        int maxLen = 0;
        
        const int nn = 50000;
        int arr[100000+1];
        
        fill_n(arr,100000+1,50002);
        
        if(len == 0 || len ==1){
            return 0;
        }
        
        nums[0] = nums[0] == 0 ? -1 : 1;
        arr[nums[0]+nn] = 0;
        
        for(int i=1;i<len;i++){
            nums[i] = nums[i-1]+ (nums[i] == 0 ?  -1 : 1);
            if(nums[i] == 0)
                maxLen = max(i+1,maxLen);
            else if(arr[nums[i]+nn] == 50002)
                arr[nums[i]+nn] = i;
            else
                maxLen = max(i - arr[nums[i]+nn],maxLen);
        }
        
        return maxLen;
    }
};
