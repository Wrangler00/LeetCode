Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

//javascript
var singleNumber = function(nums) {
    let mapp = {};
    nums.map(i=>{
        mapp[i]?++mapp[i]:(mapp[i]=1);
    });
    
    for(let i in mapp){
        if(mapp[i]===1) return i;
    }
};


//c++ (math solution)
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int initialSum = 0;
        set<int> ss (nums.begin(),nums.end());
        
        return (2* accumulate(ss.begin(),ss.end(),initialSum))-accumulate(nums.begin(),nums.end(),initialSum);
    }
};

//XOR solution c++
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++){
            ans^=nums[i];
        }
        
        return ans;
    }
};
