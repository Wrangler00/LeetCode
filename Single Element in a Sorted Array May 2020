You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.

//c++
//binary search solution

class Solution {
private:
    int answer=0;
public:
    void binSearch(vector<int>& nums,int l,int r){
        int mid = (l+r)/2;
        if(l>=mid) {
            answer = nums[l];
            return;
        }
        
        if(mid%2){
            if(nums[mid] == nums[mid-1]){
                binSearch(nums,mid+1,r);
            }else{
                binSearch(nums,l,mid-1);
            }
        }else{
            if(nums[mid] == nums[mid+1]){
                binSearch(nums,mid+2,r);
            }else{
                binSearch(nums,l,mid);
            }
        }
        
        return;
    }
    int singleNonDuplicate(vector<int>& nums) {
        binSearch(nums,0,nums.size()-1);
        
        cout<<answer;
        
        return answer;
    }
};
