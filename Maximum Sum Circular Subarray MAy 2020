Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)

Also, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)

//c++ solution

class Solution {
public:
    int kadane(vector<int>& A){
        int max_so_far = INT_MIN,max_end_here=0;
        int init_len = A.size();
        
        // cout<<init_len<<endl;
        
        for(int i=0;i<init_len;i++){
            max_end_here += A[i];
            
            if(max_so_far < max_end_here)
                max_so_far = max_end_here;
            
            if(max_end_here < 0){
                max_end_here = 0;
            }
        }
        
        return max_so_far;
    }
    int maxSubarraySumCircular(vector<int>& A) {
        int max_wrap = 0;
        int init_len = A.size();
        
        int kandane_int = kadane(A);
        
        for(int i=0;i<init_len;i++){
            max_wrap += A[i];
            A[i] = -A[i];
        }
        
        
        max_wrap += kadane(A);  
        
        return (max_wrap && max_wrap > kandane_int)? max_wrap: kandane_int; 
    }
};
