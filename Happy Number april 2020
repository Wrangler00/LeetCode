Write an algorithm to determine if a number n is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Return True if n is a happy number, and False if not.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

//c++

class Solution {
public:
    void collect_digits(std::vector<int>& digits,int num) {
        if (num > 9) {
            collect_digits(digits, num / 10);
        }
        digits.push_back(num % 10);
    }
    
    bool isHappy(int n) {
        int res = n,first=-1;
        while(res != 1){
            vector<int> digits;
            collect_digits(digits,res);
            res=0;
            for(auto i: digits){
                res += (i*i);
            }
            cout<<first<<" "<<res<<endl;
            if(first == res || res == 4)
                return false;
            if(first==-1)
                first=res;
        }
        
        return true;
    }
};
