Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

 

Example 1:



Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
Reminder: The inputs and the desired output are lists of Interval objects, and not arrays or lists.
 

Note:

0 <= A.length < 1000
0 <= B.length < 1000
0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9
NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.


//c++ Solution using segment tree

class Solution {
private:
    vector<vector<int>> ans;
    struct node{
        int l_interval;
        int r_interval;
        int max_endpoint;
        struct node *left, *right;
    };
    struct node *root;
public:
    void insertSegmentNode(vector<int> &a){
        if(!root){
            root = (node *)malloc(sizeof(node));
            root->l_interval = a[0];
            root->r_interval = a[1];
            root->max_endpoint = a[1];
            
            root->left = NULL;
            root->right = NULL;
            return;
        }
        
        struct node *pNode = root;
        
        while(true){
            pNode->max_endpoint = max(a[1],pNode->max_endpoint);
            if(a[0]<=pNode->l_interval){
                if(!pNode->left){
                    pNode->left = (node *)malloc(sizeof(node));
                    pNode = pNode->left;
                    
                    pNode->l_interval = a[0];
                    pNode->r_interval = a[1];
                    pNode->max_endpoint = a[1];
                    
                    pNode->left = NULL;
                    pNode->right = NULL;
                    break;
                }
                pNode = pNode->left;
                
            }else if(a[0]>pNode->l_interval){
                if(!pNode->right){
                    pNode->right = (node *)malloc(sizeof(node));
                    pNode = pNode->right;
                    
                    pNode->l_interval = a[0];
                    pNode->r_interval = a[1];
                    pNode->max_endpoint = a[1];
                    
                    pNode->left = NULL;
                    pNode->right = NULL;
                    
                    break;
                }
                pNode = pNode->right;
            }
        }
        
        return;
    }
    
//     void preorder(struct node *pNode){
//         if(!pNode){
//             cout<<"NULL"<<endl;
//             return;
//         }
        
//         cout<<pNode->l_interval<<" , "<<pNode->r_interval<<" , "<<pNode->max_endpoint<<endl;
        
//         preorder(pNode->left);
//         preorder(pNode->right);
//     }
    
    bool isIntersectsLeft(struct node *pNode,vector<int> &b){
        if(b[0]>=pNode->l_interval && b[0]<=pNode->r_interval)
            return true;
        return false;
    }
    
    bool isIntersectsRight(struct node *pNode,vector<int> &b){
        if((b[1]>=pNode->l_interval && b[1]<=pNode->r_interval))
            return true;
        return false;
    }
    
    bool isCompleteIntersection(struct node *pNode,vector<int> &b){
        if((b[0]<=pNode->l_interval && b[1]>=pNode->r_interval))
            return true;
        return false;
    }
    
    void searchOverlappingIntervals(struct node *pNode,vector<int> &b){
        if(!pNode)
            return;
        
        if(isIntersectsLeft(pNode, b)){
            ans.push_back({b[0],min(pNode->r_interval,b[1])});
        }else if(isIntersectsRight(pNode, b)){
            ans.push_back({max(pNode->l_interval,b[0]),b[1]});
        }else if(isCompleteIntersection(pNode, b)){
            ans.push_back({pNode->l_interval,pNode->r_interval});
        }
        
        if(!pNode->left)
            searchOverlappingIntervals(pNode->right,b);
        else if(pNode->left->max_endpoint <= b[0])
            searchOverlappingIntervals(pNode->right,b);
        else searchOverlappingIntervals(pNode->left,b);
        
        return;
    }
    
    void buildSegmentTree(vector<vector<int>>& A){
        for(auto a:A){
            insertSegmentNode(a);
        }
    }
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        buildSegmentTree(A);
        
        // preorder(root);
        
        for(auto b: B){
            searchOverlappingIntervals(root,b);
        }
        return ans;
    }
};


//c++ single isIntersection check

class Solution {
private:
    vector<vector<int>> ans;
    struct node{
        int l_interval;
        int r_interval;
        int max_endpoint;
        struct node *left, *right;
    };
    struct node *root;
public:
    void insertSegmentNode(vector<int> &a){
        if(!root){
            root = (node *)malloc(sizeof(node));
            root->l_interval = a[0];
            root->r_interval = a[1];
            root->max_endpoint = a[1];
            
            root->left = NULL;
            root->right = NULL;
            return;
        }
        
        struct node *pNode = root;
        
        while(true){
            pNode->max_endpoint = max(a[1],pNode->max_endpoint);
            if(a[0]<=pNode->l_interval){
                if(!pNode->left){
                    pNode->left = (node *)malloc(sizeof(node));
                    pNode = pNode->left;
                    
                    pNode->l_interval = a[0];
                    pNode->r_interval = a[1];
                    pNode->max_endpoint = a[1];
                    
                    pNode->left = NULL;
                    pNode->right = NULL;
                    break;
                }
                pNode = pNode->left;
                
            }else if(a[0]>pNode->l_interval){
                if(!pNode->right){
                    pNode->right = (node *)malloc(sizeof(node));
                    pNode = pNode->right;
                    
                    pNode->l_interval = a[0];
                    pNode->r_interval = a[1];
                    pNode->max_endpoint = a[1];
                    
                    pNode->left = NULL;
                    pNode->right = NULL;
                    
                    break;
                }
                pNode = pNode->right;
            }
        }
        
        return;
    }
    
    void isIntersects(struct node *pNode,vector<int> &b){
        int lo = max(pNode->l_interval,b[0]);
        int hi = min(pNode->r_interval,b[1]);
        
        if(lo<=hi){
            ans.push_back({lo,hi});
        }
        return;
    }
    
    void searchOverlappingIntervals(struct node *pNode,vector<int> &b){
        if(!pNode)
            return;
        
        isIntersects(pNode, b);
        
        if(!pNode->left)
            searchOverlappingIntervals(pNode->right,b);
        else if(pNode->left->max_endpoint <= b[0])
            searchOverlappingIntervals(pNode->right,b);
        else searchOverlappingIntervals(pNode->left,b);
        
        return;
    }
    
    void buildSegmentTree(vector<vector<int>>& A){
        for(auto a:A)   insertSegmentNode(a);
    }
    
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        buildSegmentTree(A);
        for(auto b: B)  searchOverlappingIntervals(root,b);
        return ans;
    }
};

//c++ merge intervals official solution

class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        vector<vector<int>> res;
        for (auto i = 0, j = 0; i < A.size() && j < B.size(); ) {
            int lo = max(A[i][0],B[j][0]);
            int hi = min(A[i][1],B[j][1]);
            
            if(lo<=hi)
                res.push_back({lo,hi});
            
            if(A[i][1]<B[j][1])
                ++i;
            else ++j;
        }
        return res;    
    }
};
